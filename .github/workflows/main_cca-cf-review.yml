name: Azure Web App Deployment

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest  # Changed to Windows for IIS deployment

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'

    - name: Install Dependencies
      run: |
        cd server
        npm ci
        cd ../client
        npm ci
        
    - name: Create Config
      run: |
        if (-not (Test-Path "server/config/config.json")) {
          $config = @{
            environment = "production"
            port = 8080
          }
          $config | ConvertTo-Json | Set-Content "server/config/config.json"
        }

    - name: Build Client
      run: |
        cd client
        npm run build

    - name: Create Deployment Package
      run: |
        # Run deployment script
        ./deploy.ps1

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: release
        path: release.zip
        retention-days: 5

  deploy:
    needs: build
    runs-on: windows-latest
    environment:
      name: Production
      url: https://caa-cf-review.azurewebsites.net

    steps:
    - name: Download Artifact
      uses: actions/download-artifact@v4
      with:
        name: release

    - name: Deploy to Azure Web App
      uses: azure/webapps-deploy@v2
      with:
        app-name: 'caa-cf-review'
        slot-name: 'Production'
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
        package: release.zip

    - name: Health Check
      run: |
        Write-Host "Waiting for deployment to stabilize..."
        Start-Sleep -Seconds 60

        $maxAttempts = 5
        $attempt = 1
        $healthUrl = "https://caa-cf-review.azurewebsites.net/health"

        while ($attempt -le $maxAttempts) {
          Write-Host "Health check attempt $attempt of $maxAttempts"
          
          try {
            $response = Invoke-WebRequest -Uri $healthUrl -UseBasicParsing
            if ($response.StatusCode -eq 200) {
              Write-Host "✅ Health check passed"
              exit 0
            }
          }
          catch {
            Write-Host "Health check failed: $_"
          }

          $attempt++
          if ($attempt -le $maxAttempts) {
            Write-Host "Waiting 30 seconds before retry..."
            Start-Sleep -Seconds 30
          }
        }

        Write-Host "❌ Health check failed after $maxAttempts attempts"
        exit 1