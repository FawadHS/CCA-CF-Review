name: Azure Web App Deployment

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Use Node.js LTS
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'

    - name: Verify Configuration File
      run: |
        if [ ! -f "server/config/config.json" ]; then
          echo "Creating default config.json"
          echo '{"environment": "production"}' > server/config/config.json
        fi

    - name: Load Configuration
      run: |
        node server/config/loadConfig.js || { echo "Config load failed"; exit 1; }

    - name: Install Server Dependencies
      working-directory: ./server
      run: |
        echo "Installing server dependencies..."
        npm install --no-audit --legacy-peer-deps --no-package-lock
        # Copy node_modules before running lint
        mkdir -p ../deployment/server/node_modules
        cp -r node_modules/* ../deployment/server/node_modules/ || true
        npm run lint || true
        
    - name: Install Client Dependencies
      working-directory: ./client
      run: |
        echo "Installing client dependencies..."
        npm install --no-audit --legacy-peer-deps --no-package-lock
        npm run lint || true

    - name: Prepare Deployment Package
      run: |
        mkdir -p deployment/server deployment/client
        
        # Copy server files
        cp -r server/*.js server/package*.json deployment/server/ || true
        
        # Copy client files
        cp -r client/* deployment/client/ || true
        
        # Create environment file
        cat > deployment/.env << EOL
        PORT=8080
        NODE_ENV=production
        JWT_SECRET=${{ secrets.JWT_SECRET }}
        WEBSITE_NODE_DEFAULT_VERSION=20.x
        EOL

    - name: Create web.config
      run: |
        cat > deployment/web.config << 'EOL'
        <?xml version="1.0" encoding="utf-8"?>
        <configuration>
          <system.webServer>
            <handlers>
              <add name="iisnode" path="server/start.js" verb="*" modules="iisnode"/>
            </handlers>
            <rewrite>
              <rules>
                <rule name="StaticContent">
                  <match url="^(?!api)(.*)$" />
                  <action type="Rewrite" url="client/{R:1}"/>
                </rule>
                <rule name="API">
                  <match url="^api/(.*)$" />
                  <action type="Rewrite" url="server/start.js"/>
                </rule>
              </rules>
            </rewrite>
            <iisnode
              nodeProcessCommandLine="node.exe --max-old-space-size=4096"
              watchedFiles="*.js;iisnode.yml"
              loggingEnabled="true"
            />
          </system.webServer>
        </configuration>
        EOL
    
    - name: Create Deployment Package
      run: |
        cd deployment
        zip -r ../release.zip .

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: app-release
        path: release.zip
        retention-days: 5

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment: 
      name: Production
      url: https://cca-cf-review.azurewebsites.net

    steps:
    - name: Download Artifact
      uses: actions/download-artifact@v4
      with:
        name: app-release

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_WEBAPP_CREDENTIALS }}

    - name: Deploy to Azure Web App
      uses: azure/webapps-deploy@v2
      with:
        app-name: 'cca-cf-review'
        slot-name: 'Production'
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
        package: release.zip

    - name: Post-Deployment Health Check
      run: |
        echo "Waiting for deployment to stabilize..."
        sleep 45
        for i in {1..3}; do
          if curl -f https://cca-cf-review.azurewebsites.net/health; then
            echo "✅ Health check passed"
            exit 0
          fi
          echo "Attempt $i failed, retrying..."
          sleep 20
        done
        echo "❌ Health check failed after 3 attempts"
        exit 1