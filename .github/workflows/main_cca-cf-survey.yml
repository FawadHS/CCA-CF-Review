name: Build and deploy Node.js app to Azure Web App - cca-cf-survey
on:
  push:
    branches:
      - main
  workflow_dispatch:
jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
      
      - name: Debug - Show directory contents
        run: |
          echo "Current directory contents:"
          ls -la
          echo "Server directory contents:"
          ls -la server || echo "No server directory found"
      
      - name: Set up Node.js version
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
      
      - name: Create web.config file
        run: |
          echo '<?xml version="1.0" encoding="utf-8"?>
          <configuration>
            <system.webServer>
              <webSocket enabled="false" />
              <handlers>
                <add name="iisnode" path="server/start.js" verb="*" modules="iisnode" />
              </handlers>
              <rewrite>
                <rules>
                  <rule name="NodeJS">
                    <match url="/*" />
                    <action type="Rewrite" url="server/start.js" />
                  </rule>
                </rules>
              </rewrite>
              <iisnode nodeProcessCommandLine="node.exe" watchedFiles="web.config;*.js" />
              <security>
                <requestFiltering>
                  <hiddenSegments>
                    <add segment="node_modules" />
                    <add segment="iisnode" />
                  </hiddenSegments>
                </requestFiltering>
              </security>
              <httpErrors existingResponse="PassThrough" />
            </system.webServer>
          </configuration>' > web.config
      
      - name: Create start.js file
        run: |
          mkdir -p server
          cat > server/start.js << 'EOF'
          const app = require('./app');
          const http = require('http');
          const os = require('os');

          // Get port from environment or use default
          const PORT = process.env.PORT || 8080;

          // Create HTTP server
          const server = http.createServer(app);

          // Start server
          server.listen(PORT, () => {
            console.log('==================================================');
            console.log(`CCA-CF Survey Application started on port ${PORT}`);
            console.log('==================================================');
            console.log('Environment:', process.env.NODE_ENV || 'development');
            console.log(`Running on Node.js version: ${process.version}`);
            console.log(`Platform: ${os.platform()} ${os.release()}`);
            console.log(`Host: ${os.hostname()}`);
            console.log('==================================================');
          });

          // Handle server errors
          server.on('error', (error) => {
            console.error('Server error:', error);
            
            if (error.code === 'EADDRINUSE') {
              console.error(`Port ${PORT} is already in use. Choose a different port.`);
              process.exit(1);
            }
          });

          // Handle uncaught exceptions
          process.on('uncaughtException', (error) => {
            console.error('Uncaught exception:', error);
            
            // Gracefully shutdown the server
            server.close(() => {
              process.exit(1);
            });
            
            // If server doesn't close in 5 seconds, force exit
            setTimeout(() => {
              process.exit(1);
            }, 5000);
          });

          // Handle unhandled rejections
          process.on('unhandledRejection', (reason, promise) => {
            console.error('Unhandled promise rejection:', reason);
          });
          EOF
      
      - name: Create data directory and files
        run: |
          mkdir -p server/data
          
          # Create countries.json
          echo '{"countries":[{"id":"1","name":"Afghanistan","password":"AFpass123"},{"id":"2","name":"Albania","password":"ALpass123"},{"id":"3","name":"Algeria","password":"DZpass123"},{"id":"4","name":"Brazil","password":"BRpass123"},{"id":"5","name":"Canada","password":"CApass123"}]}' > server/data/countries.json
          
          # Create other data files
          echo '{"sessions":[]}' > server/data/sessions.json
          echo '{"admin-sessions":[]}' > server/data/admin-sessions.json
          echo '{"surveys":[]}' > server/data/surveys.json
          echo '{"users":[]}' > server/data/users.json
          
      - name: Create .env file
        run: |
          echo "PORT=8080" > .env
          echo "NODE_ENV=production" >> .env
          echo "JWT_SECRET=temporary_secret_key_for_deployment" >> .env
      
      - name: Install dependencies
        run: npm install --omit=dev
        
      - name: Install server dependencies
        run: |
          if [ -d "server" ] && [ -f "server/package.json" ]; then
            cd server
            npm install --production
            cd ..
          fi
      
      - name: Create .deployment file
        run: |
          echo "[config]" > .deployment
          echo "command = npm start" >> .deployment
          
      - name: Zip artifact for deployment
        run: zip release.zip ./* -r -x "node_modules/*" "*.git*" "*.github/*" "*/.vscode/*"
        
      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: node-app
          path: release.zip
          
  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: node-app
          
      - name: Unzip artifact for deployment
        run: unzip release.zip
      
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_9BBBDCA60F0E4D9B96094EFB4BCC1302 }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_D1FDAA4C26E649A19CBAACE111D486A9 }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_C4187E6C596F4D8B9A0819B05E467CCA }}
          
      - name: 'Deploy to Azure Web App'
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'cca-cf-survey'
          slot-name: 'Production'
          package: .
